# -*- coding: utf-8 -*-
"""Blend.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nKZX1s2VvJR-CXICa0BdUDwxr1D2_N9Y
"""

from google.colab import drive
drive.mount('/content/drive' )

import numpy as np
from sklearn import metrics
import gc
import sys
import pandas as pd
sys.path.append('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/tools')
sys.path.append('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification')
from benchmark import  get_jigsaw_score
from tools_evaluate_model import evaluate

test_public_df = pd.read_csv("/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/data/test_public_cleared.csv")
#test_public_df = test_public_df.loc[:, ['toxicity','comment_text']  + IDENTITY_COLUMNS ].dropna()[:1000]
test_private_df = pd.read_csv("/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/data/test_private_cleared.csv")
#test_private_df = test_private_df.loc[:, ['toxicity', 'comment_text'] + IDENTITY_COLUMNS ].dropna()[:1000]

def get_predictions(model1PATH, model2PATH , weights):
  y_public_pred1 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/'+ model1PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred1 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model1PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred2 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model2PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred2 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model2PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred = np.average([y_public_pred1,y_public_pred2],weights= weights, axis =0)
  y_private_pred = np.average([y_private_pred1,y_private_pred2],weights= weights, axis =0)

  return y_public_pred , y_private_pred

def get_predictions3(model1PATH, model2PATH , model3PATH, weights):
  y_public_pred1 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/'+ model1PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred1 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model1PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred2 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model2PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred2 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model2PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred3 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model3PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred3 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model3PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred = np.average([y_public_pred1,y_public_pred2,y_public_pred3],weights= weights, axis =0)
  y_private_pred = np.average([y_private_pred1,y_private_pred2,y_private_pred3],weights= weights, axis =0)

  return y_public_pred , y_private_pred

def get_predictions4(model1PATH, model2PATH , model3PATH,model4PATH, weights):
  y_public_pred1 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/'+ model1PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred1 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model1PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred2 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model2PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred2 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model2PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred3 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model3PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred3 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model3PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred4 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model4PATH + '/y_public_pred.npy').reshape((-1,1))
  y_private_pred4 = np.load('/content/drive/My Drive/Jigsaw Unintended Bias in Toxicity Classification/models/' + model4PATH + '/y_private_pred.npy').reshape((-1,1))

  y_public_pred = np.average([y_public_pred1,y_public_pred2,y_public_pred3,y_public_pred4],weights= weights, axis =0)
  y_private_pred = np.average([y_private_pred1,y_private_pred2,y_private_pred3,y_private_pred4],weights= weights, axis =0)

  return y_public_pred , y_private_pred

"""# RoBERTawPool - BiLSTM2-64"""

y_public_pred ,y_private_pred =  get_predictions('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'BiLSTM/BiLSTM2-64' ,weights= [0.5,0.5])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - BiLSTM2-64' ,'Blend' )

"""# RoBERTawPool - GPT2wPool """

y_public_pred ,y_private_pred =  get_predictions('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'gpt2/gpt2-with-max-avg-pool/3_epochs' , weights= [0.6,0.4])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - GPT2wPool' ,'Blend' )

"""# RoBERTawPool - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'BiGRU/BiGRU2-64' ,weights= [0.5,0.5])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - BiGRU2-64' ,'Blend' )

"""# BiLSTM2-64 - GPT2wPool"""

y_public_pred ,y_private_pred =  get_predictions('BiLSTM/BiLSTM2-64' , 'gpt2/gpt2-with-max-avg-pool/3_epochs' ,weights= [0.5,0.5])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/BiLSTM2-64 - GPT2wPool' ,'Blend' )

"""# BiLSTM2-64 - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions('BiLSTM/BiLSTM2-64' , 'BiGRU/BiGRU2-64' ,weights= [0.5,0.5])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/BiLSTM2-64 - BiGRU2-64' ,'Blend' )

""" # GPT2wPool - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions('gpt2/gpt2-with-max-avg-pool/3_epochs' , 'BiGRU/BiGRU2-64' ,weights= [0.5,0.5])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/GPT2wPool - BiGRU2-64' ,'Blend' )

"""# RoBERTawPool - BiLSTM2-64 - GPT2wPool"""

y_public_pred ,y_private_pred =  get_predictions3('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'BiLSTM/BiLSTM2-64', 'gpt2/gpt2-with-max-avg-pool/3_epochs' ,weights= [0.4, 0.4, 0.2])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - BiLSTM2-64 - GPT2wPool' ,'Blend' )

"""# RoBERTawPool - BiLSTM2-64 - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions3('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'BiLSTM/BiLSTM2-64', 'BiGRU/BiGRU2-64' ,weights= [0.4, 0.3, 0.3])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - BiLSTM2-64 - BiGRU2-64' ,'Blend' )

"""# RoBERTawPool - GPT2wPool - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions3('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'gpt2/gpt2-with-max-avg-pool/3_epochs', 'BiGRU/BiGRU2-64' ,weights= [0.4, 0.3, 0.3])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - GPT2wPool - BiGRU2-64' ,'Blend' )

"""# BiLSTM2-64 - GPT2wPool - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions3('BiLSTM/BiLSTM2-64' , 'gpt2/gpt2-with-max-avg-pool/3_epochs', 'BiGRU/BiGRU2-64' ,weights= [0.5, 0.4, 0.1])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/BiLSTM2-64 - GPT2wPool - BiGRU2-64' ,'Blend' )

"""# RoBERTawPool - BiLSTM2-64 - GPT2wPool - BiGRU2-64"""

y_public_pred ,y_private_pred =  get_predictions4('RoBERTa/RoBERTa-with-max-avg-pool/2_epochs' , 'BiLSTM/BiLSTM2-64','gpt2/gpt2-with-max-avg-pool/3_epochs', 'BiGRU/BiGRU2-64', weights= [0.4,0.2,0.2,0.2])
evaluate(y_public_pred,y_private_pred, test_public_df, test_private_df,'Blend/RoBERTawPool - BiLSTM2-64 - GPT2wPool - BiGRU2-64' ,'Blend' )